# -*- coding: utf-8 -*-
"""lexical.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VpZu9Xe-RnFS31VuFXDPCLGFCJ0g_zt_
"""

#libries
import re
!pip install anytree
from anytree import Node, RenderTree
#-----------------------------------------------------------------------------------------------
#input data
print("\n")
x=input("Enter The Data ")
z=(re.sub("pi",'3.14',x))
y=(re.sub("[A-Za-z]+[A-Za-z]*","id",z))
lexical=""
C=1
for i in  y:
  if i=='d':
 
    i+=str(C)
    lexical+=i
    C+=1 
  else:
    lexical+=i

#print the lexical analyzer   
print("\n"+"The Lexical Analyzer: ")    
print(lexical,"\n")
#-----------------------------------------------------------------------------------------------
#put the lexical into list
def covert(string):
  list=[]
  res = re.findall('\w{3}|[+]|[=]|[*]|[/]|[-+]?[0-9]*\.?[0-9]*', string)
  list+=res
  for i in list:
    if i =='':
      list.remove(i)
  return list
#----------------------------------------------------------------------------------------------- 
#syntax tree method 
def syntax_tree(string):
  parent = Node(string[0])
  equal=Node(string[1] , parent=parent)

   #input length 5
  if(len(string)==5):
    for i in range(0,len(string)):
      if string[i]=="+" or string[i]=='-':
        addsub=Node(string[i] , parent = equal)
        num=Node(string[i-1],parent=addsub) 
        id1=Node(string[i+1],parent=addsub)

      elif(string[i]=='*' or string[i]=='/'):
        muldiv=Node(string[i],parent=equal)
        num=Node(string[i-1],parent=muldiv) 
        id=Node(string[i+1],parent=muldiv)

    #input length 7   
  elif(len(string)==7):       
    for i in range(0,len(string)):

        #id1=3+id2*id3
      if (string[i]=='+' or string[i]=='-') and (string[-2]=='*' or string[-2]=='/'):
        addsub=Node(string[i] , parent = equal)
        num=Node(string[i-1],parent=addsub)
        muldiv=Node(string[-2],parent=addsub)
        num2=Node(string[-1], parent=muldiv)
        id1=Node(string[-3],parent=muldiv)

      #id1=3*id2+id1
      elif(string[i]=='/' or string[i]=='*') and (string[-2]=='+' or string[-2]=='-'):
        addsub=Node(string[-2],parent=equal)
        num=Node(string[-1],parent=addsub)
        muldiv=Node(string[i],parent=addsub)
        num2=Node(string[i+1],parent=muldiv)
        id1=Node(string[i-1],parent=muldiv)
        
      #input lens 9
  elif(len(string)==9):
    for i in range(0,len(string)):
      #id1=2*id3+id4*7
      if(string[i]=='+' or string[i]=='-') and (string[-2]=='*' or string[-2]=='/') and (string[3]=='*' or string[3]=='/'):
        addsub=Node(string[i],parent=equal)
        muldiv=Node(string[-2],parent=addsub)
        muldiv1=Node(string[3],parent=addsub)
        num=Node(string[-1],parent=muldiv)
        id=Node(string[-3],parent=muldiv)
        num1=Node(string[2],parent=muldiv1)
        id1=Node(string[4],parent=muldiv1)

      #id1=2+id3*id4*7
      elif (string[i]=='+' or string[i]=='-') and (string[-2]=='*' or string[-2]=='/') and (string[5]=='*' or string[5]=='/'):  
        addsub=Node(string[i],parent=equal)
        num=Node(string[i-1],parent=addsub)
        muldiv=Node(string[5],parent=addsub)
        num2=Node(string[4],parent=muldiv)
        muldiv1=Node(string[-2],parent=muldiv)
        num1=Node(string[-1],parent=muldiv1)
        id1=Node(string[-3],parent=muldiv1)

       #id1=2*id3*id4+7
      elif (string[i]=='+' or string[i]=='-') and (string[3]=='*' or string[3]=='/') and (string[5]=='/' or string[5]=='*'): 
        addsub=Node(string[i],parent=equal)
        num=Node(string[-1],parent=addsub)
        muldiv=Node(string[5],parent=addsub)
        num2=Node(string[6],parent=muldiv)
        muldiv1=Node(string[3],parent=muldiv)
        num1=Node(string[2],parent=muldiv1)
        id1=Node(string[4],parent=muldiv1)  

      #id1=2+id3*id4+7  
      elif (string[i]=='*' or string[i]=='/') and (string[3]=='+' or string[3]=='-') and (string[-2]=='+' or string[-2]=='-'):
        addsub=Node(string[3],parent=equal)
        num=Node(string[2],parent=addsub)
        addsub1=Node(string[-2],parent=addsub)
        num1=Node(string[-1],parent=addsub1)
        muldiv=Node(string[i],parent=addsub1)
        num2=Node(string[i+1],parent=muldiv)
        id2=Node(string[i-1],parent=muldiv) 

      #id1=2*id3+id4+7
      elif (string[i]=='*' or string[i]=='/') and (string[5]=='+' or string[5]=='-') and (string[-2]=='+' or string[-2]=='-'):
        addsub=Node(string[5],parent=equal)
        num=Node(string[6],parent=addsub)
        addsub1=Node(string[-2],parent=addsub)
        num1=Node(string[-1],parent=addsub1)
        muldiv=Node(string[i],parent=addsub1)
        num2=Node(string[i+1],parent=muldiv)
        id2=Node(string[i-1],parent=muldiv) 
      
      #id1=2+id3+id4*7
      elif (string[i]=='*' or string[i]=='/') and (string[5]=='+' or string[5]=='-') and (string[3]=='+' or string[3]=='-'):
        addsub=Node(string[3],parent=equal)
        num=Node(string[2],parent=addsub)
        addsub1=Node(string[5],parent=addsub)
        num1=Node(string[4],parent=addsub1)
        muldiv=Node(string[i],parent=addsub1)
        num2=Node(string[i+1],parent=muldiv)
        id2=Node(string[i-1],parent=muldiv)   
  

  for pre, fill, node in RenderTree(parent):
    print("%s%s" % (pre, node.name))
#-----------------------------------------------------------------------------------------------
#semantic tree
def semantic_tree(string):
  parent = Node(string[0])
  equal=Node(string[1] , parent=parent)

    #input length 5
  
  if(len(string)==5):
    for i in range(0,len(string)):
      if string[i]=="+" or string[i]=='-':
        if string[i-1].isnumeric():
          addsub=Node(string[i] , parent = equal)
          num=Node(string[i-1],parent=addsub) 
          id1=Node(string[i+1],parent=addsub)
          intto=Node("inttofloat ("+string[i-1]+")",parent=num)

        elif string[-1].isnumeric():
          addsub=Node(string[i] , parent = equal)
          num=Node(string[-1],parent=addsub) 
          id1=Node(string[i-1],parent=addsub)
          ntto=Node("inttofloat ("+string[-1]+")",parent=num)
        else:
          addsub=Node(string[i] , parent = equal)
          num=Node(string[i-1],parent=addsub) 
          id1=Node(string[i+1],parent=addsub)

      elif(string[i]=='*' or string[i]=='/'):
        if string[i-1].isnumeric():
          muldiv=Node(string[i],parent=equal)
          id=Node(string[i+1],parent=muldiv)
          num=Node(string[i-1],parent=muldiv) 
          ntto=Node("inttofloat ("+string[-1]+")",parent=num)
        elif string[-1].isnumeric():
          muldiv=Node(string[i],parent=equal)
          id=Node(string[i-1],parent=muldiv)
          num=Node(string[-1],parent=muldiv) 
          ntto=Node("inttofloat ("+string[-1]+")",parent=num)
        else:
          muldiv=Node(string[i],parent=equal)
          num=Node(string[-1],parent=muldiv) 
          id=Node(string[i-1],parent=muldiv)

   #input length 7     
  elif(len(string)==7):       
    for i in range(0,len(string)):
# ADD MUL
      if (string[i]=='+' or string[i]=='-') and (string[-2]=='*' or string[-2]=='/'):
        if(string[-3].isnumeric() and string[-1]=='id3' and string[i-1]=='id2'):
          addsub=Node(string[i] , parent= equal)
          num=Node(string[i-1],parent=addsub)

          muldiv=Node(string[-2],parent=addsub)
          num1=Node(string[-3],parent=muldiv)
          id1=Node(string[-1],parent=muldiv)
          intto=Node("(inttofloat"+string[-3]+")",parent=num1)

        elif (string[-1].isnumeric() and string[-3]=='id3' and string[i-1]=='id2'):
          addsub=Node(string[i] , parent= equal)
          num=Node(string[i-1],parent=addsub)

          muldiv=Node(string[-2],parent=addsub)
          num1=Node(string[-1],parent=muldiv)
          id1=Node(string[-3],parent=muldiv)
          intto=Node("(inttofloat"+string[-1]+")",parent=num1)
  
        elif(string[i-1].isnumeric() and string[-3]=='id2' and string[-1]=='id3'):
          addsub=Node(string[i] , parent= equal)
          num=Node(string[i-1],parent=addsub)

          muldiv=Node(string[-2],parent=addsub)
          num1=Node(string[-1],parent=muldiv)
          id1=Node(string[-3],parent=muldiv)

          intto=Node("inttofloat("+string[i-1]+")",parent=num)

        elif (string[i-1].isnumeric() and string[-1].isnumeric()):
          addsub=Node(string[i],parent=equal)
          num=Node(string[i-1],parent=addsub)
          intto=Node("inttofloat("+string[i-1]+")",parent=num)

          muldiv=Node(string[-2] , parent=addsub)
          id=Node(string[-3],parent=muldiv)
          num1=Node(string[-1],parent=muldiv)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)

        elif(string[i-1].isnumeric() and string[-3].isnumeric):
          addsub=Node(string[i],parent=equal)
          num=Node(string[i-1],parent=addsub)
          intto=Node("inttofloat("+string[i-1]+")",parent=num) 

          muldiv=Node(string[-2] ,parent=addsub)
          num1=Node(string[-3],parent=muldiv)
          id1=Node(string[-1],parent=muldiv)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)
        
        elif(string[-3].isnumeric() and string[-1].isnumeric()):
          addsub=Node(string[i],parent=equal)
          id=Node(string[i-1],parent=addsub)

          muldiv=Node(string[-2],parent=addsub)
          num=Node(string[-1],parent=muldiv)
          intto=Node("inttofloat("+string[-1]+")",parent=num)

          num1=Node(string[-3],parent=muldiv)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)
        else:
          addsub=Node(string[i] , parent = equal)
          num=Node(string[i-1],parent=addsub)
          muldiv=Node(string[-2],parent=addsub)
          num2=Node(string[-1], parent=muldiv)
          id1=Node(string[-3],parent=muldiv)

  # Mul ADD
      elif(string[i]=='/' or string[i]=='*') and (string[-2]=='+' or string[-2]=='-'):
        
        if(string[i-1].isnumeric() and string[-1].isnumeric()):
          addsub=Node(string[-2] , parent=equal)
          num=Node(string[-1],parent=addsub)
          intto=Node("inttofloat("+string[-1]+")",parent=num)

          muldiv=Node(string[i],parent=addsub)
          id=Node(string[-3],parent=muldiv)
          num1=Node(string[i-1],parent=muldiv)
          intto1=Node("inttofloat("+string[i-1]+")",parent=num1)

        elif(string[i-1].isnumeric() and string[-3].isnumeric()):
          addsub=Node(string[-2] , parent=equal)
          id=Node(string[-1],parent=addsub)

          muldiv=Node(string[i],parent=addsub)
          num=Node(string[-3],parent=muldiv)
          num1=Node(string[i-1],parent=muldiv)
          intto1=Node("inttofloat("+string[i-1]+")",parent=num1)
          intto=Node("inttofloat("+string[-3]+")",parent=num)

        elif(string[-1].isnumeric() and string[-3].isnumeric()):
          addsub=Node(string[-2] , parent=equal)
          num=Node(string[-1],parent=addsub)
          intto=Node("inttofloat("+string[-1]+")",parent=num)
          muldiv=Node(string[i],parent=addsub)
          id=Node(string[i-1],parent=muldiv)
          num1=Node(string[-3],parent=muldiv)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)


        elif(string[i-1].isnumeric() and string[-3]=='id2' and string[-1]=='id3'):
          addsub=Node(string[-2],parent=equal)
          id=Node(string[-1],parent=addsub)
          muldiv=Node(string[i],parent=addsub)
          id1=Node(string[-3],parent=muldiv)
          num=Node(string[i-1],parent=muldiv)
          intto=Node("inttofloat("+string[i-1]+")",parent=num)  

        elif(string[-3].isnumeric() and string[-1]=='id3' and string[i-1]=='id2'):
          addsub=Node(string[-2],parent=equal)
          id=Node(string[-1],parent=addsub)

          muldiv=Node(string[i],parent=addsub)
          id1=Node(string[i-1],parent=muldiv)
          num=Node(string[-3],parent=muldiv)
          intto=Node("inttofloat("+string[-3]+")",parent=num) 

        elif(string[-1].isnumeric() and string[-3]=='id3' and string[i-1]=='id2'):
          addsub=Node(string[-2],parent=equal)
          id=Node(string[-1],parent=addsub)
          intto=Node("inttofloat("+string[-1]+")",parent=id)

          muldiv=Node(string[i],parent=addsub)
          id1=Node(string[i-1],parent=muldiv)
          num=Node(string[-3],parent=muldiv)
    
  #input length 9
  elif(len(string)==9):
    for i in range(0,len(string)):
      # MUL ADD MUL
      if(string[i]=='+' or string[i]=='-') and (string[-2]=='*' or string[-2]=='/') and (string[3]=='*' or string[3]=='/'):
        if(string[2].isnumeric()) and (string[-3].isnumeric()):
          addsub=Node(string[i],parent=equal)
          muldiv=Node(string[-2],parent=addsub)
          muldiv1=Node(string[3],parent=addsub)

          num=Node(string[2],parent=muldiv1)
          intto=Node("inttofloat("+string[2]+")",parent=num)
          id=Node(string[4],parent=muldiv1)

          num1=Node(string[-3],parent=muldiv)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)
          id1=Node(string[-1],parent=muldiv)
          
        elif(string[4].isnumeric()) and (string[-1].isnumeric()):
          addsub=Node(string[i],parent=equal)
          muldiv=Node(string[-2],parent=addsub)
          muldiv1=Node(string[3],parent=addsub)       
          num=Node(string[4],parent=muldiv1)
          intto=Node("inttofloat("+string[4]+")",parent=num)
          id=Node(string[2],parent=muldiv1)

          num1=Node(string[-1],parent=muldiv)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)
          id1=Node(string[-3],parent=muldiv)  

        elif(string[4].isnumeric()) and (string[-3].isnumeric()):
          addsub=Node(string[i],parent=equal)
          muldiv=Node(string[-2],parent=addsub)
          muldiv1=Node(string[3],parent=addsub)

          num=Node(string[4],parent=muldiv1)
          intto=Node("inttofloat("+string[4]+")",parent=num)
          id=Node(string[2],parent=muldiv1)

          num1=Node(string[-3],parent=muldiv)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)
          id1=Node(string[-1],parent=muldiv)  
        
        elif(string[2].isnumeric() and string[-1].isnumeric):
          addsub=Node(string[i],parent=equal)
          muldiv=Node(string[-2],parent=addsub)
          muldiv1=Node(string[3],parent=addsub)

          num=Node(string[2],parent=muldiv1)
          intto=Node("inttofloat("+string[2]+")",parent=num)
          id=Node(string[4],parent=muldiv1)

          num1=Node(string[-1],parent=muldiv)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)
          id1=Node(string[-3],parent=muldiv)  

      #  ADD MUL MUL
      elif (string[i]=='+' or string[i]=='-') and (string[-2]=='*' or string[-2]=='/') and (string[5]=='*' or string[5]=='/'):
        if string[-1].isnumeric() and string[4].isnumeric():
          addsub=Node(string[i],parent=equal)
          num=Node(string[i-1],parent=addsub)
          muldiv=Node(string[5],parent=addsub)
          muldiv1=Node(string[-2],parent=muldiv)

          num2=Node(string[4],parent=muldiv)
          intto=Node("inttofloat("+string[4]+")",parent=num2)

          num1=Node(string[-1],parent=muldiv1)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)
          id1=Node(string[-3],parent=muldiv1)

        elif string[-3].isnumeric() and string[4].isnumeric():
          addsub=Node(string[i],parent=equal)
          num=Node(string[i-1],parent=addsub)
          muldiv=Node(string[5],parent=addsub)
          muldiv1=Node(string[-2],parent=muldiv)

          num2=Node(string[4],parent=muldiv)
          intto=Node("inttofloat("+string[4]+")",parent=num2)

          num1=Node(string[-3],parent=muldiv1)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)
          id1=Node(string[-1],parent=muldiv1)

        elif string[2].isnumeric() and string[-1].isnumeric():
          addsub=Node(string[i],parent=equal)
          num=Node(string[4],parent=addsub)
          muldiv=Node(string[5],parent=addsub)
          muldiv1=Node(string[-2],parent=muldiv)

          num2=Node(string[2],parent=muldiv)
          intto=Node("inttofloat("+string[2]+")",parent=num2)

          num1=Node(string[-1],parent=muldiv1)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)
          id1=Node(string[-3],parent=muldiv1) 

        elif string[2].isnumeric() and string[-3].isnumeric():
          addsub=Node(string[i],parent=equal)
          num=Node(string[4],parent=addsub)
          muldiv=Node(string[5],parent=addsub)
          muldiv1=Node(string[-2],parent=muldiv)

          num2=Node(string[2],parent=muldiv)
          intto=Node("inttofloat("+string[2]+")",parent=num2)

          num1=Node(string[-3],parent=muldiv1)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)
          id1=Node(string[-1],parent=muldiv1)             

        else:    
          addsub=Node(string[i],parent=equal)
          num=Node(string[i-1],parent=addsub)
          muldiv=Node(string[5],parent=addsub)
          num2=Node(string[4],parent=muldiv)
          muldiv1=Node(string[-2],parent=muldiv)
          num1=Node(string[-1],parent=muldiv1)
          id1=Node(string[-3],parent=muldiv1)

      # MUL MUL ADD
      elif (string[i]=='+' or string[i]=='-') and (string[3]=='*' or string[3]=='/') and (string[5]=='/' or string[5]=='*'):
        if string[2].isnumeric() and string[-1].isnumeric(): 
          addsub=Node(string[i],parent=equal)
          num=Node(string[-1],parent=addsub)
          intto=Node("inttofloat("+string[-1]+")",parent=num)

          muldiv=Node(string[5],parent=addsub)
          num2=Node(string[6],parent=muldiv)

          muldiv1=Node(string[3],parent=muldiv)
          num1=Node(string[2],parent=muldiv1)
          intto1=Node("inttofloat("+string[2]+")",parent=num1)
          id1=Node(string[4],parent=muldiv1)  

        elif string[2].isnumeric() and string[-3].isnumeric(): 
          addsub=Node(string[i],parent=equal)
          num=Node(string[-1],parent=addsub)
          

          muldiv=Node(string[5],parent=addsub)
          num2=Node(string[-3],parent=muldiv)
          intto=Node("inttofloat("+string[-3]+")",parent=num2)

          muldiv1=Node(string[3],parent=muldiv)
          num1=Node(string[2],parent=muldiv1)
          intto1=Node("inttofloat("+string[2]+")",parent=num1)
          id1=Node(string[4],parent=muldiv1) 

        elif string[4].isnumeric() and string[-3].isnumeric(): 
          addsub=Node(string[i],parent=equal)
          num=Node(string[-1],parent=addsub)
          

          muldiv=Node(string[5],parent=addsub)
          num2=Node(string[-3],parent=muldiv)
          intto=Node("inttofloat("+string[-3]+")",parent=num2)
          
          muldiv1=Node(string[3],parent=muldiv)
          num1=Node(string[4],parent=muldiv1)
          intto1=Node("inttofloat("+string[4]+")",parent=num1)
          id1=Node(string[2],parent=muldiv1)  

        elif string[4].isnumeric() and string[-1].isnumeric(): 
          addsub=Node(string[i],parent=equal)
          num=Node(string[-1],parent=addsub)
          intto=Node("inttofloat("+string[-1]+")",parent=num)

          muldiv=Node(string[5],parent=addsub)
          num2=Node(string[-3],parent=muldiv)
          
          
          muldiv1=Node(string[3],parent=muldiv)
          num1=Node(string[4],parent=muldiv1)
          intto1=Node("inttofloat("+string[4]+")",parent=num1)
          id1=Node(string[2],parent=muldiv1)       
    # ADD MUL ADD 
      elif (string[i]=='*' or string[i]=='/') and (string[3]=='+' or string[3]=='-') and (string[-2]=='+' or string[-2]=='-'):
        if string[2].isnumeric() and string[-1].isnumeric(): 
          addsub=Node(string[3],parent=equal)
          num=Node(string[2],parent=addsub)
          intto=Node("inttofloat("+string[2]+")",parent=num)

          addsub1=Node(string[-2],parent=addsub)
          num1=Node(string[-1],parent=addsub1)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)

          muldiv=Node(string[i],parent=addsub1)        
          num2=Node(string[i+1],parent=muldiv)
          id2=Node(string[i-1],parent=muldiv)

        elif string[2].isnumeric() and string[-3].isnumeric(): 
          addsub=Node(string[3],parent=equal)
          num=Node(string[2],parent=addsub)
          intto=Node("inttofloat("+string[2]+")",parent=num)

          addsub1=Node(string[-2],parent=addsub)
          id1=Node(string[-1],parent=addsub1)
          

          muldiv=Node(string[i],parent=addsub1)        
          num2=Node(string[-3],parent=muldiv)
          intto1=Node("inttofloat("+string[-3]+")",parent=num2)
          id2=Node(string[i-1],parent=muldiv) 

        elif string[4].isnumeric() and string[-1].isnumeric(): 
          addsub=Node(string[3],parent=equal)
          num=Node(string[2],parent=addsub)
          
          addsub1=Node(string[-2],parent=addsub)
          num1=Node(string[-1],parent=addsub1)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)

          muldiv=Node(string[i],parent=addsub1)        
          num2=Node(string[4],parent=muldiv)
          id2=Node(string[-3],parent=muldiv) 
          intto1=Node("inttofloat("+string[4]+")",parent=num2) 

        elif string[4].isnumeric() and string[-3].isnumeric(): 
          addsub=Node(string[3],parent=equal)
          num=Node(string[2],parent=addsub)
          
          addsub1=Node(string[-2],parent=addsub)
          num1=Node(string[-1],parent=addsub1)
          
          muldiv=Node(string[i],parent=addsub1)        
          num2=Node(string[4],parent=muldiv)
          id2=Node(string[-3],parent=muldiv) 
          intto1=Node("inttofloat("+string[-3]+")",parent=id2)
          intto1=Node("inttofloat("+string[4]+")",parent=num2)   

  # MUL ADD ADD
      elif (string[i]=='*' or string[i]=='/') and (string[5]=='+' or string[5]=='-') and (string[-2]=='+' or string[-2]=='-'):
        if string[2].isnumeric() and string[-3].isnumeric():
          addsub=Node(string[5],parent=equal)
          addsub1=Node(string[-2],parent=addsub)
          muldiv=Node(string[i],parent=addsub1)

          num=Node(string[-3],parent=addsub)
          intto=Node("inttofloat("+string[-3]+")",parent=num)

          id=Node(string[-1],parent=addsub1)

          num1=Node(string[2],parent=muldiv)
          intto1=Node("inttofloat("+string[2]+")",parent=num1)
          id1=Node(string[4],parent=muldiv)

        elif string[2].isnumeric() and string[-1].isnumeric():
          addsub=Node(string[5],parent=equal)
          addsub1=Node(string[-2],parent=addsub)
          muldiv=Node(string[i],parent=addsub1)

          num=Node(string[-3],parent=addsub)
          

          id=Node(string[-1],parent=addsub1)
          intto=Node("inttofloat("+string[-1]+")",parent=id)

          num1=Node(string[2],parent=muldiv)
          intto1=Node("inttofloat("+string[2]+")",parent=num1)
          id1=Node(string[4],parent=muldiv)

        elif string[4].isnumeric() and string[-3].isnumeric():
          addsub=Node(string[5],parent=equal)
          addsub1=Node(string[-2],parent=addsub)
          muldiv=Node(string[i],parent=addsub1)

          id=Node(string[2],parent=muldiv)
          num=Node(string[4],parent=muldiv)
          intto=Node("inttofloat("+string[4]+")",parent=num)

          num1=Node(string[-3],parent=addsub1)
          intto1=Node("inttofloat("+string[-3]+")",parent=num1)

          num2= num1=Node(string[-1],parent=addsub)

        elif string[4].isnumeric() and string[-1].isnumeric():
          addsub=Node(string[5],parent=equal)
          addsub1=Node(string[-2],parent=addsub)
          muldiv=Node(string[i],parent=addsub1)

          id=Node(string[2],parent=muldiv)
          num=Node(string[4],parent=muldiv)
          intto=Node("inttofloat("+string[4]+")",parent=num)

          num1=Node(string[-1],parent=addsub1)
          intto1=Node("inttofloat("+string[-1]+")",parent=num1)

          num2= num1=Node(string[-3],parent=addsub)  

    # ADD ADD MUL
      elif (string[i]=='*' or string[i]=='/') and (string[5]=='+' or string[5]=='-') and (string[3]=='+' or string[3]=='-'):
        if string[2].isnumeric() and string[-1].isnumeric():        
          addsub=Node(string[3],parent=equal)
          addsub1=Node(string[5],parent=addsub)
          muldiv=Node(string[i],parent=addsub1)

          num=Node(string[-1],parent=muldiv) 
          intto=Node("inttofloat("+string[-1]+")" , parent= num)
          id=Node(string[-3],parent=muldiv)

          id1=Node(string[4],parent=addsub1)

          num1=Node(string[2],parent=addsub) 
          intto1=Node("inttofloat("+string[2]+")" , parent= num1)

        elif string[2].isnumeric() and string[-3].isnumeric():        
          addsub=Node(string[3],parent=equal)
          addsub1=Node(string[5],parent=addsub)
          muldiv=Node(string[i],parent=addsub1) 

          num=Node(string[-3],parent=muldiv) 
          intto=Node("inttofloat("+string[-3]+")" , parent= num)
          id=Node(string[-1],parent=muldiv)

          id1=Node(string[4],parent=addsub1)

          num1=Node(string[2],parent=addsub) 
          intto1=Node("inttofloat("+string[2]+")" , parent= num1)

        elif string[4].isnumeric() and string[-1].isnumeric():
          addsub=Node(string[3],parent=equal)
          addsub1=Node(string[5],parent=addsub)
          muldiv=Node(string[i],parent=addsub1) 

          num=Node(string[-1],parent=muldiv) 
          intto=Node("inttofloat("+string[-1]+")" , parent= num)
          id=Node(string[-3],parent=muldiv)

          num1=Node(string[4],parent=addsub1)
          intto1=intto=Node("inttofloat("+string[4]+")" , parent= num1)

          id=Node(string[2],parent=addsub)
        
        elif string[4].isnumeric() and string[-3].isnumeric():
          addsub=Node(string[3],parent=equal)
          addsub1=Node(string[5],parent=addsub)
          muldiv=Node(string[i],parent=addsub1) 

          num=Node(string[-3],parent=muldiv) 
          intto=Node("inttofloat("+string[-3]+")" , parent= num)
          id=Node(string[-1],parent=muldiv)

          num1=Node(string[4],parent=addsub1)
          intto1=intto=Node("inttofloat("+string[4]+")" , parent= num1)

          id=Node(string[2],parent=addsub)   

  for pre, fill, node in RenderTree(parent):
    print("%s%s" % (pre, node.name))
#-----------------------------------------------------------------------------------------------
#ICG method
def ICG(li):

   #input lens 5
  if len(li)==5:
    for i in range(0 , len(li)):
      if li[-1].isnumeric() and li[i-1].isnumeric() and  li[i]=='+' or li[i]=='-' :
        t1="inttofloat("+li[i-1]+")"
        print("t1="+t1)
        t2="inttofloat("+li[-1]+")"
        print("t2="+t2)
        t3=li[i]
        print("t3=""t1"+t3+"t2")
        print("id1=""t3")
      elif li[i-1].isnumeric() and li[i]=='+' or li[i]=='-' :
        t1="inttofloat("+li[i-1]+")"
        print("t1="+t1)
        t2=li[i]+li[i+1]
        print("t2=""t1"+t2)
        print("id1=t2")  
      elif li[-1].isnumeric() and li[i]=='+' or li[i]=='-' :
        t1="inttofloat("+li[i+1]+")"
        print("t1="+t1)
        t2=li[i]+li[i-1]
        print("t2=""t1"+t2)
        print("id1=t2")
      elif li[-1]=='id3'and li[i-1]=='id2'and li[i]=='+' or li[i]=='-':   
        t1=li[i-1]+li[i]+li[-1]
        print('t1='+t1)
        print("id1=t1")
      elif li[-1].isnumeric() and li[i-1].isnumeric() and  li[i]=='*' or li[i]=='/' :
        t1="inttofloat("+li[i-1]+")"
        print("t1="+t1)
        t2="inttofloat("+li[-1]+")"
        print("t2="+t2)
        t3=li[i]
        print("t3=""t1"+t3+"t2")
        print("id1=""t3")  
      elif li[-1].isnumeric() and li[i]=='*' or li[i]=='/' :
        t1="inttofloat("+li[i+1]+")"
        print("t1="+t1)
        t2=li[i]+li[i-1]
        print("t2=""t1"+t2)
        print("id1=t2")   
      elif li[i-1].isnumeric() and li[i]=='*' or li[i]=='/' :
        t1="inttofloat("+li[i-1]+")"
        print("t1="+t1)
        t2=li[i]+li[i+1]
        print("t2=""t1"+t2)
        print("id1=t2")    
      elif li[-1]=='id3' and li[i-1]=='id2' and li[i]=='*' or li[i]=='/':   
        t1=li[i-1]+li[i]+li[-1]
        print('t1='+t1)
        print("id1=t1") 
      elif li[i-1]=='3.14' and li[-1]=='id2' and li[i]=='*' or li[i]=='/':
        t1=li[i-1]+li[i]+li[-1]
        print('id1='+"t1")   
      elif li[i-1]=='3.14' and li[-1]=='id2' and li[i]=='+' or li[i]=='-':
        t1=li[i-1]+li[i]+li[-1]
        print('id1='+t1)   
   #input lens 7       
  elif len(li)==7:
    for i in range(0 , len(li)):
      if (li[i-1].isnumeric() and li[-1].isnumeric()) and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="inttofloat("+li[i-1]+")"
        print("t1="+t1)
        t2="inttofloat("+li[-1]+")"
        print("t2="+t2)
        t3=li[i]
        print("t3=""t1"+t3+"t2")
        t4=li[3]+li[2]
        print("t4=""t3"+t4)
        print("id1=""t4")  
      elif (li[2].isnumeric() and li[4].isnumeric()) and (li[3]=="*" or li[3]=="/") and (li[i]=="+" or li[3]=="-"):
        t1="inttofloat("+li[2]+")"
        print("t1="+t1)
        t2="inttofloat("+li[4]+")"
        print("t2="+t2)
        t3=li[3]
        print("t3=""t1"+t3+"t2")
        t4=li[i]+li[-1]
        print("t4=""t3"+t4)
        print("id1=""t4")      
      elif li[i-1].isnumeric() and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="inttofloat("+li[i-1]+")"
        print("t1="+t1)
        t2=li[i]+li[i+1]
        print("t2=""t1"+t2)
        t3=li[3]+li[2]
        print("t3=""t2"+t3)
        print("id1=""t3")
      elif li[-1].isnumeric() and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="inttofloat("+li[-1]+")"
        print("t1="+t1)
        t2=li[i]+li[i-1]
        print("t2=""t1"+t2)
        t3=li[3]+li[2]
        print("t3=""t2"+t3)
        print("id1=""t3")
      elif (li[i-1]=="id3" and li[-1]=="id4") and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1=li[i-1]+li[i]+li[i+1]
        print("t1="+t1)
        t2=li[3]+li[2]
        print("t2=""t1"+t2)
        print("id1=""t2")
      elif(li[-1].isnumeric() and li[2].isnumeric()) and (li[i]=="+" or li[i]=='-') and (li[3]=="*" or li[3]=="/"):
        t1="inttofloat("+li[2]+")"
        print("t1="+t1)
        t2="inttofloat("+li[-1]+")"
        print("t2="+t2)
        t3=li[3]+li[4]
        print("t3=""t1"+t3)
        t4=li[i]+li[i-1]
        print("t4=""t2"+t4)      
        print("id1=""t3")
      elif li[2].isnumeric() and (li[i]=="+" or li[i]=='-') and (li[3]=="*" or li[3]=="/"):
        t1="inttofloat("+li[2]+")"
        print("t1="+t1)
        t2=li[3]+li[4]
        print("t2=""t1"+t2)
        t3=li[i]+li[i+1]
        print("t3=""t2"+t3)
        print("id1=""t3")
      elif li[4].isnumeric() and (li[i]=="+" or li[i]=='-') and (li[3]=="*" or li[3]=="/"):
        t1="inttofloat("+li[4]+")"
        print("t1="+t1)
        t2=li[3]+li[2]
        print("t2=""t1"+t2)
        t3=li[i]+li[i+1]
        print("t3=""t2"+t3)
        print("id1=""t3")
      elif (li[2].isnumeric()) and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="inttofloat("+li[2]+")"
        print("t1="+t1)
        t2=li[-3]+li[-2]+li[-1]
        print("t2="+t2)
        t3="t1"+li[3]+"t2"
        print("t3="+t3)
        print("id1=""t3")    
  #input lens 9
  elif len(li)==9: 
# multiply in between
    if (li[3]=='+' or li[3]=='-') and (li[5]=='*' or li[5]=='/') and (li[-2]=='+' or li[-2]=='+'):
      if li[2].isnumeric() and li[-3].isnumeric():
          t1="inttofloat("+li[-3]+")"
          t2="inttofloat("+li[2]+")"
          print("t1 = "+t1)
          print("t2 = "+t2)
          t3=li[5]+li[4]
          print("t3 = "+"t1"+t3 )
          t4=li[3]
          print("t4 = "+"t2"+t4+"t3" )
          t5=li[-2]+li[-1]
          print("t5 = " + "t4"+t5)
          print("id1 = t5")
      elif (li[2].isnumeric()) and (li[-1].isnumeric()):
        t1="inttofloat("+li[2]+")"
        print("t1 = "+t1)
        t2="inttofloat("+li[-1]+")"
        print("t2 = "+t2)
        t3=li[4]+li[5]+li[-3]
        print("t3 = "+t3)
        t4=li[3]
        print("t4 = "+"t3"+t4+"t1")
        t5=li[-2]
        print("t5 = "+"t4"+t5+"t2")
        print("id1 = t5")
      elif li[4].isnumeric() and li[-1].isnumeric():
          t1="inttofloat("+li[4]+")"
          t2="inttofloat("+li[-1]+")"
          print("t1 = "+t1)
          print("t2 = "+t2)
          t3=li[5]+li[6]
          print("t3 = "+"t1"+t3)
          t4=li[-2]
          print("t4 = " + "t2" + t4 + "t3")
          t5=li[3]+li[2]
          print("t5 = "+"t4"+t5)
          print("id1 = t5")
       
      elif li[4].isnumeric() and li[-3].isnumeric():
        t1="inttofloat("+li[4]+")"
        t2="inttofloat("+li[-3]+")"
        print("t1 = "+t1)
        print("t2 = "+t2)
        t3=li[5]
        print("t3 = "+"t1"+t3+"t2")
        t4=li[-2]+li[-1]
        print("t4 = " + "t3" + t4)
        t5=li[3]+li[2]
        print("t5 = " +"t4"+t5)
        print("id1 = t5")
# plus in between
    elif (li[5]=='+' or li[5]=='-') and (li[3]=='*' or li[3]=='/') and (li[-2]=='*' or li[-2]=='/'):
      if(li[2].isnumeric()) and (li[-3].isnumeric()):
        t1="inttofloat("+li[-3]+")"
        print("t1 = "+t1)
        t2="inttofloat("+li[2]+")"
        print("t2 = "+t2)
        t3=li[-2]+li[-1]
        print("t3 = "+"t1"+t3)
        t4=li[3]+li[4]
        print("t4 = "+"t2"+t4)
        t5=li[5]
        print("t5 = "+"t3"+t5+"t4")
        print("id1 = t5")
      elif (li[2].isnumeric()) and (li[-1].isnumeric()):
          t1="inttofloat("+li[-1]+")"
          print("t1 = "+t1)
          t2="inttofloat("+li[2]+")"
          print("t2 = "+t2)
          t3=li[-2]+li[-3]
          print("t3 = "+"t1"+t3)
          t4=li[3]+li[4]
          print("t4 = "+"t2"+t4)
          t5=li[5]
          print("t5 = "+"t3"+t5+"t4")
          print("id1 = t5")      
      elif (li[4].isnumeric()) and (li[-1].isnumeric()):
          t1="inttofloat("+li[-1]+")"
          print("t1 = "+t1)
          t2="inttofloat("+li[4]+")"
          print("t2 = "+t2)
          t3=li[-2]+li[-3]
          print("t3 = "+"t1"+t3)
          t4=li[3]+li[2]
          print("t4 = "+"t2"+t4)
          t5=li[5]
          print("t5 = "+"t3"+t5+"t4")
          print("id1 = t5")    
      # id1 =id2 * 5 + 6 * id3
      elif li[4].isnumeric() and li[-3].isnumeric():
          t1="inttofloat("+li[4]+")"
          t2="inttofloat("+li[-3]+")"
          print("t1 = "+t1)
          print("t2 = "+t2)
          t3=li[3]+li[2]
          print("t3 = "+"t1"+t3)
          t4=li[-2]+li[-1]
          print("t4 = "+"t2"+t4)
          t5=li[5]
          print("t5 = "+"t4"+t5+"t3")
          print("id1 = t5")
#-----------------------------------------------------------------------------------------------
#optmiser method          
def optmiser(li):
   #input lens 5
  if len(li)==5:
    for i in range(0 , len(li)):
      if li[-1].isnumeric() and li[i-1].isnumeric() and  li[i]=='+' or li[i]=='-' :
        t1="#"+li[-1]+".0"+li[i]+"#"+li[i-1]+".0"
        print("id1="+ t1)  
      elif li[-1].isnumeric() and li[i]=='+' or li[i]=='-' :
        t1="#"+li[i+1]+".0"+li[i]+li[i-1]
        print("id1="+ t1)
      elif li[i-1].isnumeric() and li[i]=='+' or li[i]=='-':
        t1='#'+li[i-1]+".0"+li[i]+li[i+1]  
        print("id1="+t1)  
      elif li[-1]=='id3'and li[i-1]=='id2'and li[i]=='+' or li[i]=='-':   
        t1=li[i-1]+li[i]+li[-1]
        print('id1='+t1)
      elif li[-1].isnumeric() and li[i-1].isnumeric() and  li[i]=='*' or li[i]=='/' :
        t1="#"+li[-1]+".0"+li[i]+"#"+li[i-1]+".0"
        print("id1="+ t1) 
      elif li[-1].isnumeric() and li[i]=='*' or li[i]=='/' :
        t1="#"+li[i+1]+".0"+li[i]+li[i-1]
        print("id1="+ t1)
      elif li[i-1].isnumeric() and li[i]=='*' or li[i]=='/':
        t1='#'+li[i-1]+".0"+li[i]+li[i+1]  
        print("id1="+t1)  
      elif li[-1]=='id3' and li[i-1]=='id2' and li[i]=='*' or li[i]=='/':   
        t1=li[i-1]+li[i]+li[-1]
        print('id1='+t1) 
      elif li[i-1]=='3.14' and li[-1]=='id2' and li[i]=='*' or li[i]=='/':
        t1=li[i-1]+li[i]+li[-1]
        print('id1='+t1)   
      elif li[i-1]=='3.14' and li[-1]=='id2' and li[i]=='+' or li[i]=='-':
        t1=li[i-1]+li[i]+li[-1]
        print('id1='+t1)   
  #input lens 7      
  elif len(li)==7:
    for i in range(0 , len(li)):
      if (li[i-1].isnumeric() and li[-1].isnumeric()) and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="#"+li[-1]+".0"+" "+li[i]+" "+"#"+li[i-1]+".0"
        print("t1="+t1)
        t2=li[3]+li[2]
        print("id1=""t1"+t2)  

      elif (li[2].isnumeric() and li[4].isnumeric()) and (li[3]=="*" or li[3]=="/") and (li[i]=="+" or li[3]=="-"):
        t1="#"+li[2]+".0"+" "+li[3]+" #"+ li[4]+".0"
        print("t1="+t1)
        t2=li[i]+li[-1]
        print("id1=""t1"+t2)
  
      elif li[i-1].isnumeric() and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="#"+li[i-1]+".0"+" "+li[i]+" "+li[i+1]
        print("t1="+t1)
        t2=li[3]+li[2]
        print("id1=""t1"+t2)

      elif li[-1].isnumeric() and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1="#"+li[-1]+".0"+" "+li[i]+" "+li[i-1]
        print("t1="+t1)
        t2=li[3]+li[2]
        print("id1=""t1"+t2)

      elif (li[i-1]=="id3" and li[-1]=="id4") and (li[i]=="*" or li[i]=='/') and (li[3]=="+" or li[3]=="-"):
        t1=li[i-1]+li[i]+li[i+1]
        print("t1="+t1)
        t2=li[3]+li[2]
        print("id1=""t1"+t2)
      elif(li[-1].isnumeric() and li[2].isnumeric()) and (li[i]=="+" or li[i]=='-') and (li[3]=="*" or li[3]=="/"): 
        t1="#"+li[2]+".0"+""+li[3]+li[4]
        print("t1="+t1)
        t2="#"+li[-1]+".0"+""+li[i]+"t1"
        print("id1="+t2)
      elif li[2].isnumeric() and (li[i]=="+" or li[i]=='-') and (li[3]=="*" or li[3]=="/"):
        t1="#"+li[2]+".0"+""+li[3]+li[4]
        print("t1="+t1)
        t2=li[i]+li[i+1]
        print("id1=""t1"+t2)
      
      elif li[4].isnumeric() and (li[i]=="+" or li[i]=='-') and (li[3]=="*" or li[3]=="/"):
        t1="#"+li[4]+".0"+li[3]+li[2]
        print("t1="+t1)
        t2=li[i]+li[i+1]
        print("id1=""t1"+t2)
      elif (li[2].isnumeric()) and (li[3]=="+" or li[3]=="-") and (li[i]=="*" or li[i]=='/') :
        t1=li[-3]+li[-2]+li[-1]
        print("t1="+t1)
        t2="t1"+li[3]+li[2]+".0"
        print("t2="+t2)
        print("id1=""t2") 
   #input length 9     
  elif len(li)==9:  
    if (li[3]=='+' or li[3]=='-') and (li[5]=='*' or li[5]=='/') and (li[-2]=='+' or li[-2]=='+'):
      if li[2].isnumeric() and li[-3].isnumeric():
        t1="#"+li[-3]+".0"+li[5]+li[4]
        t2="#"+li[2]+".0"+li[3]
        print("t1 = "+t1)
        print("t2 = "+t2+"t1")
        t3=li[-2]+li[-1]
        print("id1 = t2" +t3)
      elif (li[2].isnumeric()) and (li[-1].isnumeric()):
        t1=li[4]+li[5]+li[-3]
        print("t1 = "+t1)
        t2=li[3]+" #"+li[2]+".0"
        print("t2 = t1"+t2)
        t3=li[-2]+" #"+li[-1]+".0"
        print("id1 = "+"t2"+t3)  
      elif li[4].isnumeric() and li[-1].isnumeric():
        t1="#"+li[4]+".0"+li[5]+li[6]
        t2="#"+li[-1]+".0"+li[-2]
        print("t1 = "+t1)
        print("t2 = "+t2+"t1")
        t3=li[3]+li[2]
        print("id1 = t2"+t3)

      elif li[4].isnumeric() and li[-3].isnumeric():
        t1="#"+li[4]+".0"+li[5]+"#"+li[-3]+".0"
        print("t1 = "+t1)
        t2=li[3]+li[2]
        print("t2 = "+"t1"+t2)
        t3=li[-2]+li[-1]
        print("id1 = "+"t2"+t3)

  # Plus in between
  # 'id1','=','y','*','5','+','z','*','6'
    elif (li[5]=='+' or li[5]=='-') and (li[3]=='*' or li[3]=='/') and (li[-2]=='*' or li[-2]=='/'):
      if(li[2].isnumeric()) and (li[-3].isnumeric()):
        t1="#"+li[-3]+".0"+li[-2]+li[-1]
        print("t1 = "+t1)
        t2="#"+li[2]+".0"+li[3]+li[4]
        print("t2 = "+t2)
        t3=li[5]
        print("id1 = "+"t1"+t3+"t2")
      elif (li[2].isnumeric()) and (li[-1].isnumeric()):
        t1="#"+li[-1]+".0"+li[-2]+li[-3]
        print("t1 = "+t1)
        t2="#"+li[2]+".0"+li[3]+li[4]
        print("t2 = "+t2)
        t3=li[5]
        print("t3 = "+"t1"+t3+"t2")
        t4=li[3]+li[4]
        print("id1 = "+"t3")
      elif (li[4].isnumeric()) and (li[-1].isnumeric()):
        t1="#"+li[-1]+".0"+li[-2]+li[-3]
        print("t1 = "+t1)
        t2="#"+li[4]+".0"+li[3]+li[2]
        print("t2 = "+t2)
        t3=li[5]
        print("id1 = "+"t1"+t3+"t2")
      
    # id1 =id2 * 5 + 6 * id3
      elif li[4].isnumeric() and li[-3].isnumeric():
        t1="#"+li[4]+".0"+li[3]+li[2]
        t2="#"+li[-3]+".0"+li[-2]+li[-1]
        print("t1 = "+t1)
        print("t2 = "+t2)
        t3=li[5]
        print("id1 = "+"t1"+t3)  
#-----------------------------------------------------------------------------------------------  
#code genrator method         
def code_genrator(li):
  if len(li)==9:
                          #MULL ADD  MULL
    if (li[5]=='+' or li[5]=='-') and (li[3]=='*' or li[3]=='/') and (li[-2]=='*' or li[-2]=='/'):
         #(num) MULL (id) ADD (num) MULL  (id)
      if(li[2].isnumeric()) and (li[-3].isnumeric()):
        print("LDF "+"R2 "+","+li[-1])
        print("MULF "+"R2"+","+"R2"+","+li[-3]+".0")
        print("LDF "+"R1"+","+li[4])
        print("MULF "+"R1"+","+"R1"+","+li[2]+".0")
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF  "+li[0]+","+"R1")
         #(id) MULL (num) ADD (id) MULL  (num)
      elif (li[4].isnumeric()) and (li[-1].isnumeric()):
        print("LDF "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2"+","+li[-1]+".0")
        print("LDF "+"R1"+","+li[2])
        print("MULF "+"R1"+","+"R1"+","+li[4]+".0")
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF  "+li[0]+","+"R1")
          #(id) MULL (num) ADD (num) MULL  (id)
      elif li[4].isnumeric() and li[-3].isnumeric():
        print("LDF "+"R2 "+","+li[-1])
        print("MULF "+"R2"+","+"R2"+","+li[-3]+".0")
        print("LDF "+"R1"+","+li[2])
        print("MULF "+"R1"+","+"R1"+","+li[4]+".0")
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF  "+li[0]+","+"R1")
           #(num) MULL (id) ADD (id) MULL  (num)          
      elif li[2].isnumeric() and li[-1].isnumeric():  
        print("LDF "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2"+","+li[-1]+".0")
        print("LDF "+"R1"+","+li[4])
        print("MULF "+"R1"+","+"R1"+","+li[2]+".0")
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF "+li[0]+","+"R1")  
                #  ADD   MUL    ADD   
    elif (li[3]=='+' or li[3]=='-' ) and (li[5]=='*' or li[5]=='/')  and (li[-2]=='+' or li[-2]=='+'):
        #  (num) ADD (id)  MUL  (num)   ADD (id)
      if li[2].isnumeric() and li[-1].isnumeric():
        print("LDF  "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2"+","+li[4])
        print("ADDF "+"R2"+","+"R2"+","+li[-1]+".0")
        print("ADDF "+"R1"+","+"R2"+","+li[2]+".0")
        print("STRF "+li[0]+","+"R1")  
         #  (id) ADD (num)  MUL  (id)   ADD (num)
      elif li[4].isnumeric() and li[-1].isnumeric():
        print("LDF "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2"+","+li[4]+".0")
        print("ADDF "+"R2"+","+"R2"+","+li[-1]+".0")
        print("ADDF "+"R1"+","+"R2"+","+li[2])
        print("STRF "+li[0]+","+"R1") 
            #  (id) ADD (num)  MUL  (num)   ADD (id)
      elif li[4].isnumeric() and li[-3].isnumeric():  
        print("MULF "+"R2"+","+li[-3]+".0"+","+li[4]+".0")
        print("LDF "+"R2 "+","+li[-1])
        print("ADDF "+"R2"+","+"R2"+","+li[-1])
        print("ADDF "+"R1"+","+"R2"+","+li[2])
        print("STRF "+li[0]+","+"R1")   
          #  (num) ADD (id)  MUL  (id)   ADD (num)
      elif li[2].isnumeric() and li[-1].isnumeric():
        print("LDF  "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2"+","+li[4])
        print("ADDF "+"R2"+","+"R2"+","+li[-1]+".0")
        print("ADDF "+"R1"+","+"R2"+","+li[2]+".0")
        print("STRF "+li[0]+","+"R1")
          #  (num) ADD (id)  MUL  (num)   ADD (id)  
      elif li[2].isnumeric() and li[-3].isnumeric():
        print("LDF  "+"R2 "+","+li[4])
        print("MULF "+"R2"+","+"R2"+","+li[-3]+".0")
        print("LDF  "+"R1 "+","+li[-1])
        print("ADDF "+"R2"+","+"R2"+","+"R1")
        print("ADDF "+"R1"+","+"R2"+","+li[2]+".0")
        print("STRF "+li[0]+","+"R1")      
          
  elif len(li)==7: 

         #id1=id2 +2*3  (id) ADD (num) MUL (num) 
    if (li[-2]=="*" or li[-2]=='/') and (li[3]=="+" or li[3]=="-"):
      if(li[-1].isnumeric() and li[-3].isnumeric()):
        print("MULF "+"R2"+","+li[-1]+".0"+","+li[-3]+".0")
        print("LDF  "+"R1 "+","+li[2])
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF "+li[0]+","+"R1") 

             #id1=id2 +2*id3  (id) ADD (num) MUL (id) 
      elif (li[-3].isnumeric()): 
        print("LDF  "+"R2 "+","+li[-1])
        print("MULF "+"R2"+","+"R2"+","+li[-3]+".0")
        print("LDF  "+"R1 "+","+li[2])
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF "+li[0]+","+"R1") 
        #id1=id2 +2*3  (id) ADD (num) MUL (id)
      elif (li[-1].isnumeric()):
        print("MULF "+"R2"+","+li[-1]+".0"+","+li[-3]+".0")
        print("LDF  "+"R1 "+","+li[2])
        print("ADDF "+"R1"+","+"R2")
        print("STRF "+li[0]+","+"R1")

      #id1=id2 +id3*id4  (id) ADD (id) MUL (id)
          #0 1 2 3 456  
      elif (li[-3]=="id3" and li[-1]=="id4"):
        print("LDF  "+"R2 "+","+li[-1])
        print("MULF "+"R2"+","+"R2"+","+li[-3])
        print("LDF  "+"R1 "+","+li[2])
        print("ADDF "+"R1"+","+"R1"+","+"R1")
        print("STRF "+li[0]+","+"R1")
      #id1=id2 +2*id3  (id) ADD (num) MUL (id)
          #0 1 2 3 456
      elif li[4].isnumeric() and (li[-1]=="id3" ) and (li[2]=="id2" ):  
        print("LDF  "+"R2 "+","+li[-1])
        print("MULF "+"R2"+","+"R2"+","+li[-3]+".0")
        print("ADDF "+"R1"+","+"R2"+","+li[2]+".0")
        print("STRF "+li[0]+","+"R1")
        #id1=2 +id2*id3  (id) ADD (num) MUL (id)
          #0 1 2 3 456
      elif li[2].isnumeric() and (li[-1]=="id3" ) and (li[-3]=="id2" ):  
        print("LDF  "+"R2 "+","+li[-1])
        print("MULF "+"R2"+","+"R2"+","+li[-3])
        print("ADDF "+"R1"+","+"R2"+","+li[2]+".0")
        print("STRF "+li[0]+","+"R1")  
      #id1=2 +3*id2  (id) ADD (num) MUL (num)
    elif  (li[3]=="*" or li[3]=="/") and (li[-2]=="+" or li[-2]=="-"):  
      if (li[2].isnumeric() and li[4].isnumeric()):  
        print("MULF "+"R2"+","+li[2]+".0"+","+li[-3]+".0")
        print("LDF  "+"R1 "+","+li[-1])
        print("ADDF "+"R1"+","+"R1"+","+"R2")
        print("STRF "+li[0]+","+"R1") 
      #id1=2*id2+3  (num) ADD (id) MUL (num)
          #0 1 2 3 456  
      elif(li[-1].isnumeric() and li[2].isnumeric()):
        print("LDF  "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2"+","+li[2]+".0")
        print("ADDF "+"R1"+","+"R2"+","+li[-1]+".0")
        print("STRF "+li[0]+","+"R1")
      
      #id1=2 *id2+id3  (num) ADD (id) MUL (id)
      elif (li[2].isnumeric()) :
        print("LDF  "+"R2 "+","+li[-3])
        print("MULF "+"R2"+","+"R2+"+","+li[2]+".0")
        print("ADDF "+"R1"+","+"R2"+","+li[-1])
        print("STRF "+li[0]+","+"R1")
 
  elif len(li)==5:
               #(id) ADD (num)
    if li[-1].isnumeric() and (li[3]=='+' or li[3]=='-') :
      print("LDF  "+"R1 "+","+li[2])
      print("ADDF "+"R1"+","+"R1"+","+li[-1]+".0")
      print("STRF "+li[0]+","+"R1") 
      #(id) ADD (num)
    elif li[2].isnumeric() and li[3]=='+' or li[3]=='-':
      print("LDF  "+"R1 "+","+li[-1])
      print("ADDF "+"R1"+","+"R1"+","+li[2]+".0")
      print("STRF "+li[0]+","+"R1") 
    #(id) ADD (id)
    elif li[-1]=='id3'and li[2]=='id2'and li[3]=='+' or li[3]=='-':   
      print("LDF  "+"R2 "+","+li[-1])
      print("ADDF "+"R1"+","+"R2"+","+li[2])
      print("STRF "+li[0]+","+"R1")
    #(id) MULL (num)
    elif (li[-1].isnumeric()) and (li[3]=='*' or li[3]=='/'):
      print("LDF  "+"R2 "+","+li[2])
      print("MULF "+"R1"+","+"R2"+","+li[-1])
      print("STRF "+li[0]+","+"R1")
  #(num) MULL (id)
    elif (li[2].isnumeric()) and (li[3]=='*' or li[3]=='/'):
      print("LDF  "+"R2 "+","+li[-1])
      print("MULF "+"R1"+","+"R2"+","+li[-1]+".0")
      print("STRF "+li[0]+","+"R1")
    #(id) ADD (id)
  elif (li[-1]=='id3' and li[2]=='id2') and (li[3]=='*' or li[3]=='/'):   
      print("LDF  "+"R2 "+","+li[-1])
      print("MULF "+"R1"+","+"R2"+","+li[2])
      print("STRF "+li[0]+","+"R1") 
  elif li[2]=='3.14' and li[-1]=='id2' and li[-2]=='*' or li[-2]=='/':
      print("LDF  "+"R2 "+","+li[-1])
      print("MULF "+"R1"+","+"R2"+","+li[2])
      print("STRF "+li[0]+","+"R1")  
  elif li[2]=='3.14' and li[-1]=='id2' and li[-2]=='+' or li[-2]=='-':
      print("LDF  "+"R2 "+","+li[-1])
      print("ADDF "+"R1"+","+"R2"+","+li[2])
      print("STRF "+li[0]+","+"R1")              
#-----------------------------------------------------------------------------------------------     
#print the list   
print("The List: ",covert(lexical),"\n")
#print the syntax tree
print("The Syntax Tree: \n")
syntax_tree(covert(lexical))
print("\n")
#print the semantic tree
print("The Semantic Tree: \n")
semantic_tree(covert(lexical))
#Print ICG  
print("\n"+ "The ICG: \n")
ICG (covert(lexical))
#print optmiser
print("\n"+"The Optmiser: ")
optmiser(covert(lexical))
#print code genrator
print("\n"+"The code genrator: ")
code_genrator(covert(lexical))